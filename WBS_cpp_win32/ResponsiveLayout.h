/*
 * ============================================================================
 * ResponsiveLayout.h - WBSアプリケーション レスポンシブレイアウト機能
 * ============================================================================
 * 
 * このヘッダーファイルは、WBSアプリケーションのメインダイアログを
 * レスポンシブ対応にするための機能を提供します。
 * 
 * 【主な機能】
 * - ダイアログサイズ変更時のコントロール自動リサイズ
 * - コントロールの相対位置保持
 * - 最小サイズ制限
 * - 各コントロールの適切な配置調整
 * 
 * 【設計原則】
 * - TreeViewは幅固定、高さ可変
 * - ListViewは幅・高さ共に可変
 * - ボタン群は相対位置を保持
 * - 最小サイズでの使い勝手を確保
 * 
 * 作成者: WBS開発チーム
 * 作成日: 2024年
 * バージョン: 1.0
 * ============================================================================
 */

#pragma once
#include <vector>
#include <Windows.h>

// ============================================================================
// レスポンシブレイアウト管理用構造体
// ============================================================================

/**
 * @brief コントロールのレイアウト情報を管理する構造体
 * 
 * ダイアログがリサイズされた際に、各コントロールをどのように
 * リサイズ・移動するかの情報を保持します。
 */
struct ControlLayoutInfo {
    int controlId;          ///< コントロールID
    RECT originalRect;      ///< 初期位置とサイズ
    bool resizeWidth;       ///< 幅をリサイズするか
    bool resizeHeight;      ///< 高さをリサイズするか
    bool moveRight;         ///< 右端に固定するか
    bool moveBottom;        ///< 下端に固定するか
    double widthRatio;      ///< 幅の拡縮比率（0.0-1.0）
    double heightRatio;     ///< 高さの拡縮比率（0.0-1.0）
};

// ============================================================================
// グローバル変数（レスポンシブ機能用）
// ============================================================================

extern SIZE g_originalDialogSize;                      ///< ダイアログの初期サイズ
extern std::vector<ControlLayoutInfo> g_controlLayouts; ///< コントロールレイアウト情報

// ============================================================================
// レスポンシブレイアウト関数宣言
// ============================================================================

/**
 * @brief コントロールのレイアウト情報を初期化
 * 
 * @param hDlg ダイアログハンドル
 * 
 * ダイアログの初期化時に呼び出され、各コントロールの初期位置と
 * リサイズ動作を定義します。この関数はWM_INITDIALOGで呼び出してください。
 * 
 * @note この関数は一度だけ呼び出してください。
 */
void InitializeResponsiveLayout(HWND hDlg);

/**
 * @brief コントロールの位置とサイズを更新
 * 
 * @param hDlg ダイアログハンドル
 * @param newWidth 新しいダイアログ幅
 * @param newHeight 新しいダイアログ高さ
 * 
 * ダイアログのサイズ変更時に呼び出され、各コントロールの位置と
 * サイズを新しいダイアログサイズに合わせて調整します。
 * この関数はWM_SIZEメッセージハンドラーで呼び出してください。
 */
void UpdateResponsiveLayout(HWND hDlg, int newWidth, int newHeight);

/**
 * @brief 最小サイズ制限を設定
 * 
 * @param lpMMI MINMAXINFO構造体のポインタ
 * 
 * ダイアログの最小サイズを設定します。
 * この関数はWM_GETMINMAXINFOメッセージハンドラーで呼び出してください。
 */
void SetMinimumSize(LPMINMAXINFO lpMMI);