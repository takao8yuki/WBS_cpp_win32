/*
 * ============================================================================
 * framework.h - WBSアプリケーション 共通フレームワークヘッダー
 * ============================================================================
 * 
 * このファイルは、WBS（Work Breakdown Structure）管理アプリケーション全体で
 * 使用される標準的なシステムヘッダーファイルのインクルードを一元管理します。
 * プリコンパイル済みヘッダー（PCH）としても機能し、ビルド時間の短縮に貢献します。
 * 
 * 【主な役割】
 * - Windows APIの基本ヘッダーファイルのインクルード
 * - Common Controls（TreeView/ListView等）の初期化
 * - C/C++標準ライブラリの基本ヘッダーインクルード
 * - コンパイル最適化の設定
 * - プロジェクト全体での一貫したインクルード環境の提供
 * 
 * 【設計原則】
 * - Win32 Lean and Mean: 不要なAPI定義を除外してコンパイル速度向上
 * - 前方宣言の活用: 不要な依存関係を避ける
 * - プラットフォーム固有設定の集約化
 * - 開発効率性: 頻繁に使用されるヘッダーを事前にコンパイル
 * 
 * 【対象プラットフォーム】
 * - Windows 10/11 (x86/x64)
 * - Visual Studio 2019/2022
 * - C++14準拠コンパイラ
 * 
 * 【使用上の注意】
 * - このファイルは全ての.cppファイルの最初にインクルードすること
 * - 新しいWindows APIを使用する場合は、ここに追加を検討すること
 * - プロジェクト固有の定義は別のヘッダーファイルに分離すること
 * 
 * 作成者: WBS開発チーム
 * 作成日: 2024年
 * 最終更新: 2024年
 * バージョン: 1.0
 * ============================================================================
 */

// header.h : 標準のシステム インクルード ファイルのインクルード ファイル、
// またはプロジェクト専用のインクルード ファイル

#pragma once

// ============================================================================
// Windows バージョン定義
// ============================================================================
#include "targetver.h"                  // Windowsバージョンターゲット定義

// ============================================================================
// コンパイル最適化設定
// ============================================================================

/**
 * @brief WIN32_LEAN_AND_MEAN マクロ
 * 
 * Windows.hから使用頻度の低いAPIを除外することで、
 * コンパイル時間の短縮とバイナリサイズの削減を実現します。
 * 
 * 除外されるAPI群:
 * - COMM API (通信)
 * - RPC API (リモートプロシージャコール)
 * - Sound API (サウンド)
 * - 一部のGDI API
 * - MCIコマンド関連
 * 
 * @note 必要に応じて個別にインクルードすることで、
 *       除外されたAPIも使用可能です
 */
#define WIN32_LEAN_AND_MEAN             // Windows ヘッダーからほとんど使用されていない部分を除外する

// ============================================================================
// Windows API ヘッダーファイル群
// ============================================================================

/**
 * @brief Windows.h - Windows APIの中核ヘッダー
 * 
 * Windows APIの基本的な型定義、定数、関数宣言を含みます。
 * WBSアプリケーションで使用される以下の機能を提供:
 * - ウィンドウ管理 (CreateWindow, ShowWindow等)
 * - メッセージ処理 (GetMessage, DispatchMessage等)
 * - ファイルI/O (CreateFile, ReadFile等)
 * - メモリ管理 (HeapAlloc, GlobalAlloc等)
 * - システム情報取得 (GetSystemTime等)
 */
#include <windows.h>

/**
 * @brief commctrl.h - Common Controls API
 * 
 * Windows Common Controlsライブラリの定義を含みます。
 * WBSアプリケーションの主要UI要素で使用:
 * - TreeView: 階層的タスク表示用
 * - ListView: タスク詳細情報表示用
 * - StatusBar: ステータス表示用（将来実装予定）
 * - ToolBar: ツールバー用（将来実装予定）
 * - ProgressBar: 進捗表示用（将来実装予定）
 * 
 * @note InitCommonControlsEx()の呼び出しが必要
 */
#include <commctrl.h>

/**
 * @brief Common Controlsライブラリのリンク
 * 
 * コンパイラにCommon Controlsライブラリ(comctl32.lib)の
 * 自動リンクを指示します。これにより、以下の機能が使用可能になります:
 * - TreeView/ListViewコントロールの作成・操作
 * - Visual Stylesのサポート
 * - Windows XP以降のモダンな外観
 */
#pragma comment(lib, "comctl32.lib")

// ============================================================================
// C/C++ 標準ライブラリヘッダーファイル群
// ============================================================================

/**
 * @brief stdlib.h - C標準ライブラリ
 * 
 * 基本的なC言語の標準関数を提供:
 * - メモリ管理: malloc(), free(), calloc(), realloc()
 * - 文字列/数値変換: atoi(), atof(), strtol(), strtod()
 * - プロセス制御: exit(), abort(), atexit()
 * - 乱数生成: rand(), srand()
 * - ソート/検索: qsort(), bsearch()
 */
#include <stdlib.h>

/**
 * @brief malloc.h - メモリ割り当て拡張
 * 
 * Windows固有のメモリ管理関数を提供:
 * - _malloc_dbg(): デバッグ版メモリ割り当て
 * - _CrtSetDbgFlag(): メモリリーク検出設定
 * - _alloca(): スタック上での一時的メモリ割り当て
 * 
 * @note デバッグビルドでのメモリリーク検出に有用
 */
#include <malloc.h>

/**
 * @brief memory.h - メモリ操作関数
 * 
 * 低レベルなメモリ操作関数を提供:
 * - memcpy(): メモリブロックのコピー
 * - memset(): メモリブロックの初期化
 * - memcmp(): メモリブロックの比較
 * - memmove(): 重複可能なメモリブロックの移動
 */
#include <memory.h>

/**
 * @brief tchar.h - Unicode/ANSI統一文字処理
 * 
 * Unicode（UTF-16）とANSI（CP932）の両方に対応した
 * 文字列処理マクロを提供します。WBSアプリケーションでは
 * Unicodeビルドを標準としているため、以下のマッピングが適用されます:
 * 
 * @details マクロマッピング（Unicode時）:
 * - TCHAR → wchar_t
 * - _T("string") → L"string"
 * - _tcslen → wcslen
 * - _tcscpy → wcscpy
 * - _tcscat → wcscat
 * - _tcscmp → wcscmp
 * 
 * @note レガシーコード互換性のために包含
 *       新規コードではstd::wstringの使用を推奨
 */
#include <tchar.h>
